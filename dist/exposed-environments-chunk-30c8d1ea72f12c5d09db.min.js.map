{"version":3,"file":"exposed-environments-chunk-30c8d1ea72f12c5d09db.min.js","mappings":"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","sources":["webpack://console-gitops-plugin/./components/utils/gitops-utils.ts","webpack://console-gitops-plugin/./components/GitOpsEmptyState.tsx","webpack://console-gitops-plugin/./components/list/GitOpsTableHeader.tsx","webpack://console-gitops-plugin/./components/list/GitOpsList.tsx","webpack://console-gitops-plugin/./components/GitOpsListPage.tsx"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { consoleFetchJSON } from '@openshift-console/dynamic-plugin-sdk';\nimport * as _ from 'lodash-es';\nexport const getManifestURLs = (namespaces) => {\n    const annotation = 'app.openshift.io/vcs-uri';\n    return _.uniq(namespaces\n        .filter((ns) => {\n        var _a, _b;\n        return !!((_b = (_a = ns.metadata) === null || _a === void 0 ? void 0 : _a.annotations) === null || _b === void 0 ? void 0 : _b[annotation]);\n    })\n        .map((ns) => {\n        var _a, _b;\n        return (_b = (_a = ns.metadata) === null || _a === void 0 ? void 0 : _a.annotations) === null || _b === void 0 ? void 0 : _b[annotation];\n    }));\n};\nexport const getApplicationsListBaseURI = () => {\n    return `/api/gitops/applications`;\n};\n// export const fetchAppGroups = async (\n//   baseURL: string,\n//   manifestURL: string,\n// ): Promise<GitOpsAppGroupData[]> => {\n//   let data: GitOpsManifestData;\n//   try {\n//     const newListApi = getApplicationsListBaseURI();\n//     data = await coFetchJSON(`${newListApi}?url=${manifestURL}`);\n//   } catch (err) {\n//     try {\n//       data = await coFetchJSON(`${baseURL}&url=${manifestURL}`);\n//     } catch {} // eslint-disable-line no-empty\n//   }\n//   return data?.applications ?? [];\n// };\nexport class RetryError extends Error {\n}\nexport class TimeoutError extends Error {\n    constructor(url, ms, ...params) {\n        super(`Call to ${url} timed out after ${ms}ms.`); //Ã¥ ...params);\n        // Dumb hack to fix `instanceof TimeoutError`\n        Object.setPrototypeOf(this, TimeoutError.prototype);\n    }\n}\nconst initDefaults = {\n    headers: {},\n    credentials: 'same-origin',\n};\nconst cookiePrefix = 'csrf-token=';\nconst getCSRFToken = () => document &&\n    document.cookie &&\n    document.cookie\n        .split(';')\n        .map((c) => _.trim(c))\n        .filter((c) => c.startsWith(cookiePrefix))\n        .map((c) => c.slice(cookiePrefix.length))\n        .pop();\nexport const validateStatus = (response, url, method, retry) => __awaiter(void 0, void 0, void 0, function* () {\n    console.log('VALIDATE STATUS - RESPONSE STATUS IS ' + response.status);\n    console.log('VALIDATE STATUS - RESPONSE TEXT IS ' + response.text);\n    console.log('VALIDATE STATUS - RESPONSE BODY IS ' + response.body);\n    console.log('VALIDATE STATUS - RESPONSE formData IS ' + response.formData);\n    if (response.ok) {\n        return response;\n    }\n    // if (retry && response.status === 429) {\n    //   throw new RetryError();\n    // }\n    // if (response.status === 401 && shouldLogout(url)) {\n    //   authSvc.logout(window.location.pathname);\n    // }\n    // const contentType = response.headers.get('content-type');\n    // if (!contentType || contentType.indexOf('json') === -1) {\n    //   const error = new Error(response.statusText);\n    //   error.response = response;\n    //   throw error;\n    // }\n    // if (response.status === 403) {\n    //   return response.json().then((json) => {\n    //     const error = new Error(json.message || 'Access denied due to cluster policy.');\n    //     error.response = response;\n    //     error.json = json;\n    //     throw error;\n    //   });\n    // }\n    return response.json().then((json) => {\n        var _a, _b, _c;\n        // retry 409 conflict errors due to ClustResourceQuota / ResourceQuota\n        // https://bugzilla.redhat.com/show_bug.cgi?id=1920699\n        if (retry &&\n            method === 'POST' &&\n            response.status === 409 &&\n            ['resourcequotas', 'clusterresourcequotas'].includes((_a = json.details) === null || _a === void 0 ? void 0 : _a.kind)) {\n            throw new RetryError();\n        }\n        const cause = (_c = (_b = json.details) === null || _b === void 0 ? void 0 : _b.causes) === null || _c === void 0 ? void 0 : _c[0];\n        let reason;\n        if (cause) {\n            reason = `Error \"${cause.message}\" for field \"${cause.field}\".`;\n        }\n        if (!reason) {\n            reason = json.message;\n        }\n        if (!reason) {\n            reason = json.error;\n        }\n        if (!reason) {\n            reason = response.statusText;\n        }\n        const error = new Error(reason);\n        // error.response = response;\n        // error.json = json;\n        throw error;\n    });\n});\nexport const coFetchInternal = (url, options, timeout, retry) => __awaiter(void 0, void 0, void 0, function* () {\n    const allOptions = _.defaultsDeep({}, initDefaults, options);\n    if (allOptions.method !== 'GET') {\n        allOptions.headers['X-CSRFToken'] = getCSRFToken();\n    }\n    // If the URL being requested is absolute (and therefore, not a local request),\n    // remove the authorization header to prevent credentials from leaking.\n    if (url.indexOf('://') >= 0) {\n        delete allOptions.headers.Authorization;\n        delete allOptions.headers['X-CSRFToken'];\n    }\n    const fetchPromise = yield fetch(url, allOptions)\n        .then((response) => response.json())\n        .then((data) => {\n        console.log('DATA!!! is ' + data);\n        console.log(JSON.stringify(data));\n    });\n    // return fetch promise directly if timeout <= 0\n    if (timeout < 1) {\n        return fetchPromise;\n    }\n    const timeoutPromise = new Promise((unused, reject) => setTimeout(() => reject(new TimeoutError(url, timeout)), timeout));\n    // Initiate both the fetch promise and a timeout promise\n    return Promise.race([fetchPromise, timeoutPromise]);\n});\nexport const fetchAppGroups = (baseURL, manifestURL) => __awaiter(void 0, void 0, void 0, function* () {\n    var _a;\n    let data;\n    try {\n        const newListApi = getApplicationsListBaseURI();\n        console.log('fetching ' + newListApi);\n        data = yield consoleFetchJSON(`${newListApi}?url=${manifestURL}`);\n    }\n    catch (err) {\n        console.log('ERROR in fetch ' + err);\n        try {\n            data = yield consoleFetchJSON(`${baseURL}&url=${manifestURL}`);\n        }\n        catch (_b) { } // eslint-disable-line no-empty\n        // Ignore and let empty data be handled by fetchAllAppGroups\n    }\n    return (_a = data === null || data === void 0 ? void 0 : data.applications) !== null && _a !== void 0 ? _a : [];\n});\n// export const fetchAppGroups = async (\n//   baseURL: string,\n//   manifestURL: string,\n// ): Promise<GitOpsAppGroupData[]> => {\n//   let data: GitOpsManifestData;\n//   try {\n//     // const newListApi = getApplicationsListBaseURI();\n//     // const newListApi = 'https://cluster.openshift-gitops.svc:8080/applications';\n//     // const manifestURL = 'https://gitlab.com/keithchong/gitops5.git?ref=main';\n//     // let data2 = await Axios.get('http://localhost:9000/api/gitops/applications?url=https://gitlab.com/keithchong/gitops5.git?ref=HEAD');\n//     //https://cluster.openshift-gitops.svc:8080/api/gitops/applications');\n//     // console.log(\"****** DATA is \" + data);\n//     // let url = 'https://cluster.openshift-gitops.svc:8080/applications?url=https://gitlab.com/keithchong/gitops5.git?ref=HEAD';\n//     let url = 'api/gitops/applications?url=https://github.com/keithchong/gitops411.git?ref=HEAD';\n//     let options = {};\n//     let attempt = 0;\n//     let timeout = 60000;\n//     let response;\n//     let retry = true;\n//     while (retry) {\n//       retry = false;\n//       attempt++;\n//       try {\n//         response = await coFetchInternal(url, options, timeout, attempt < 3);\n//         data = await response.json();\n//         console.log(\"DATA!!! is \" + data);\n//         return data?.applications ?? [];\n//       } catch (e) {\n//         if (e instanceof RetryError) {\n//           retry = true;\n//         } else {\n//           // throw e;\n//         }\n//       }\n//     }\n//     console.log(\"****** DATA is \" + data);\n//     // data = await consoleFetchJSON(`${newListApi}?url=${manifestURL}`);\n//     // data = await consoleFetchJSON(url, \"GET\", options, timeout);\n//     // console.log(\"****** DATA is \" + stringify(data));\n//   } catch (err) {\n//     console.log(\"****** ERROR is \" + err);\n//     try {\n//       // data = await coFetchJSON(`${baseURL}&url=${manifestURL}`);\n//     } catch {} // eslint-disable-line no-empty\n//   }\n//   return data?.applications ?? [];\n// };\nexport const fetchAllAppGroups = (baseURL, manifestURLs, t) => __awaiter(void 0, void 0, void 0, function* () {\n    console.log('baseURLs: ', baseURL);\n    console.log('manifestURLs: ', manifestURLs);\n    let emptyMsg = null;\n    let allAppGroups = null;\n    console.log('Getting app groups ');\n    if (baseURL) {\n        if (_.isEmpty(manifestURLs)) {\n            emptyMsg = 'No GitOps manifest URLs found'; // t('gitops-plugin~No GitOps manifest URLs found');\n        }\n        else {\n            try {\n                allAppGroups = _.sortBy(_.flatten(yield Promise.all(_.map(manifestURLs, (manifestURL) => fetchAppGroups(baseURL, manifestURL)))), ['name']);\n            }\n            catch (_c) { } // eslint-disable-line no-empty\n            if (_.isEmpty(allAppGroups)) {\n                emptyMsg = 'gitops-plugin~No Application groups found'; // t('gitops-plugin~No Application groups found');\n            }\n        }\n    }\n    return [allAppGroups, emptyMsg];\n});\n// TODO\n// export const getEnvData = async (v2EnvURI: string, envURI: string, env: string, appURI: string) => {\n//   let data;\n//   try {\n//     data = await coFetchJSON(`${v2EnvURI}/${env}${appURI}`);\n//   } catch {\n//     try {\n//       data = await coFetchJSON(`${envURI}/${env}${appURI}`);\n//     } catch {} // eslint-disable-line no-empty\n//   }\n//   return data;\n// };\nexport const getPipelinesBaseURI = (secretNS, secretName) => {\n    return secretNS && secretName\n        ? `/api/gitops/pipelines?secretNS=${secretNS}&secretName=${secretName}`\n        : undefined;\n};\nexport const getArgoCDFilteredAppsURI = (argocdBaseUri, appGroupName) => {\n    return argocdBaseUri && appGroupName\n        ? `${argocdBaseUri}/applications?labels=app.kubernetes.io%252Fname%253D${appGroupName}`\n        : undefined;\n};\nexport const getApplicationsBaseURI = (appName, secretNS, secretName, manifestURL) => {\n    return secretNS && secretName\n        ? `/application/${appName}?secretNS=${secretNS}&secretName=${secretName}&url=${manifestURL}&app=${appName}`\n        : undefined;\n};\n","import * as React from 'react';\nimport { EmptyState, EmptyStateIcon, EmptyStateVariant, EmptyStateBody, } from '@patternfly/react-core';\nimport { CubesIcon } from '@patternfly/react-icons';\nconst GitOpsEmptyState = ({ emptyStateMsg }) => (React.createElement(EmptyState, { variant: EmptyStateVariant.full },\n    React.createElement(EmptyStateIcon, { variant: \"container\", component: CubesIcon }),\n    React.createElement(EmptyStateBody, null, emptyStateMsg)));\nexport default GitOpsEmptyState;\n","import { sortable, Th, Thead } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport * as React from 'react';\n// import i18n from '@console/internal/i18n';\n// import { TableColumn } from '@openshift-console/dynamic-plugin-sdk';\nconst tableColumnClasses = [\n    classNames.default('pf-m-width-20'),\n    classNames.default('pf-m-width-30'),\n    classNames.default('pf-m-hidden', 'pf-m-visible-on-md', 'pf-m-width-20'),\n    classNames.default('pf-m-hidden', 'pf-m-visible-on-lg', 'pf-m-width-30'), // Last deployment\n];\nexport const GitOpsTableColumn = (hasSyncStatus) => {\n    // let columns = new Array<TableColumn<1>>();\n    return [\n        {\n            // title: i18n.t('gitops-plugin~Application name'),\n            title: 'Application name',\n            id: 'name',\n            sortField: 'name',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[0] },\n        },\n        {\n            // title: i18n.t('gitops-plugin~Git repository'),\n            title: 'Git repository',\n            id: 'gitRepository',\n            sortField: 'gitRepository',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[1] },\n        },\n        {\n            title: hasSyncStatus\n                ? 'Environment status' // i18n.t('gitops-plugin~Environment status')\n                : 'Environment',\n            id: 'environments',\n            sortField: 'environments',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[2] },\n        },\n        {\n            // title: i18n.t('gitops-plugin~Last deployment'),\n            title: 'Last deployment',\n            id: 'lastDeployment',\n            sortField: 'lastDeployment',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[3] },\n        },\n    ];\n};\nexport const GitOpsTableHeader = ({ hasSyncStatus, columns }) => {\n    return (React.createElement(Thead, null,\n        React.createElement(Th, { hasRightBorder: true, width: 10, rowSpan: 1 }, \"Application name\"),\n        React.createElement(Th, { hasRightBorder: true, width: 10, rowSpan: 1 }, \"Git repository\"),\n        React.createElement(Th, { hasRightBorder: true, width: 10, rowSpan: 1 }, \"Environment status\"),\n        React.createElement(Th, { hasRightBorder: true, width: 10, rowSpan: 1 }, \"Last deployment\")));\n    // return [\n    //   {\n    //     // title: i18n.t('gitops-plugin~Application name'),\n    //     title: 'Application name',\n    //     id: 'name',\n    //     sortField: 'name',\n    //     transforms: [sortable],\n    //     props: { className: tableColumnClasses[0] },\n    //   },\n    //   {\n    //     // title: i18n.t('gitops-plugin~Git repository'),\n    //     title: 'Git repository',\n    //     id: 'gitRepository',\n    //     sortField: 'gitRepository',\n    //     transforms: [sortable],\n    //     props: { className: tableColumnClasses[1] },\n    //   },\n    //   {\n    //     title: hasSyncStatus\n    //       ? 'Environment status' // i18n.t('gitops-plugin~Environment status')\n    //       : 'Environment', // i18n.t('gitops-plugin~Environment'),\n    //     id: 'environments',\n    //     sortField: 'environments',\n    //     transforms: [sortable],\n    //     props: { className: tableColumnClasses[2] },\n    //   },\n    //   {\n    //     // title: i18n.t('gitops-plugin~Last deployment'),\n    //     title: 'Last deployment',\n    //     id: 'lastDeployment',\n    //     sortField: 'lastDeployment',\n    //     transforms: [sortable],\n    //     props: { className: tableColumnClasses[3] },\n    //   },\n    // ];\n};\n// export default GitOpsTableHeader;\n","import * as React from 'react';\n// import { useTranslation } from 'react-i18next';\n// import { Table, TextFilter } from '@console/internal/components/factory';\n// import { fuzzyCaseInsensitive } from '@console/internal/components/factory/table-filters';\n// import { VirtualizedTable } from '@openshift-console/dynamic-plugin-sdk';\nimport { TableComposable, Tbody, InnerScrollContainer, OuterScrollContainer, Td } from '@patternfly/react-table';\nimport GitOpsEmptyState from '../GitOpsEmptyState';\nimport { GitOpsTableHeader } from './GitOpsTableHeader';\nconst GitOpsList = ({ appGroups, emptyStateMsg }) => {\n    // const { t } = useTranslation();\n    // const [textFilter, setTextFilter] = React.useState('');\n    // const visibleItems = appGroups?.filter(({ name }) => {\n    // return fuzzyCaseInsensitive(textFilter, name);\n    // });\n    const hasSyncStatus = (appGroups === null || appGroups === void 0 ? void 0 : appGroups.some(({ sync_status }) => sync_status /* eslint-disable-line @typescript-eslint/camelcase */)) || false;\n    return (React.createElement(\"div\", { className: \"gop-gitops-list\" }, !emptyStateMsg && appGroups ? (React.createElement(React.Fragment, null,\n        React.createElement(OuterScrollContainer, null,\n            React.createElement(InnerScrollContainer, null,\n                React.createElement(TableComposable, { \"aria-label\": \"Applications table\", variant: \"compact\", isStickyHeader: true },\n                    React.createElement(GitOpsTableHeader\n                    // onSort={onSort}\n                    // sortDirection={activeSortDirection}\n                    // sortIndex={activeSortIndex}\n                    , { \n                        // onSort={onSort}\n                        // sortDirection={activeSortDirection}\n                        // sortIndex={activeSortIndex}\n                        hasSyncStatus: hasSyncStatus }),\n                    React.createElement(Tbody, null, appGroups.map(app => {\n                        (React.createElement(React.Fragment, null,\n                            React.createElement(Td, { key: app.name },\n                                React.createElement(\"div\", null,\n                                    React.createElement(\"span\", null, app.name))),\n                            React.createElement(Td, { width: 10 },\n                                React.createElement(\"div\", null, app.repo_url)),\n                            React.createElement(Td, null, app.sync_status),\n                            React.createElement(Td, null, app.last_deployed)));\n                    }))))))) : (React.createElement(GitOpsEmptyState, { emptyStateMsg: emptyStateMsg }))));\n};\nexport default GitOpsList;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as React from 'react';\nimport * as _ from 'lodash-es';\nimport Helmet from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { useK8sWatchResource, ListPageHeader, ListPageBody } from '@openshift-console/dynamic-plugin-sdk';\nimport { fetchAllAppGroups, getManifestURLs } from './utils/gitops-utils';\nimport GitOpsList from './list/GitOpsList';\n// import { PageHeading /*, LoadingBox */ } from '@console/internal/components/utils';\n// import { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\n// import { ProjectModel } from '@console/internal/models';\n// import { K8sResourceKind } from '@console/internal/module/k8s';\n// import { DevPreviewBadge } from '@console/shared';\n// import GitOpsList from './list/GitOpsList';\n// import useDefaultSecret from './utils/useDefaultSecret';\n// import './GitOpsListPage.scss';\n// const projectRes = { isList: true, kind: ProjectModel.kind, optional: true };\nconst projectRes = { isList: true, kind: 'Project', optional: true };\nconst GitOpsListPage = () => {\n    const [appGroups, setAppGroups] = React.useState(null);\n    const [emptyStateMsg, setEmptyStateMsg] = React.useState(null);\n    const [namespaces, nsLoaded, nsError] = useK8sWatchResource(projectRes);\n    // const [namespaces, nsLoaded, nsError] = useK8sWatchResource<K8sResourceKind[]>(projectRes);\n    const baseURL = '/api/gitops/pipelines';\n    const { t } = useTranslation();\n    React.useEffect(() => {\n        let ignore = false;\n        const getAppGroups = () => __awaiter(void 0, void 0, void 0, function* () {\n            if (nsLoaded) {\n                const manifestURLs = (!nsError && getManifestURLs(namespaces)) || [];\n                const [allAppGroups, emptyMsg] = yield fetchAllAppGroups(baseURL, manifestURLs, t);\n                if (ignore)\n                    return;\n                setAppGroups(allAppGroups);\n                setEmptyStateMsg(emptyMsg);\n            }\n        });\n        getAppGroups();\n        return () => {\n            ignore = true;\n        };\n    }, [baseURL, namespaces, nsError, nsLoaded, t]);\n    // React.useEffect(() => {\n    //   let ignore = false;\n    //   const getAppGroups = async () => {\n    //     if (nsLoaded) {\n    //       const manifestURLs = (/*!nsError &&*/ getManifestURLs(namespaces)) || [];\n    //       const [allAppGroups, emptyMsg] = await fetchAllAppGroups(baseURL, manifestURLs, t);\n    //       if (ignore) return;\n    //       setAppGroups(allAppGroups);\n    //       setEmptyStateMsg(emptyMsg);\n    //     }\n    //   };\n    //   getAppGroups();\n    //   return () => {\n    //     ignore = true;\n    //   };\n    // }, [baseURL, /* namespaces, nsError, nsLoaded, */ t]);\n    // React.useEffect(() => {\n    //   let ignore = false;\n    //   const getAppGroups = async () => {\n    //     if (nsLoaded && !appGroups) {\n    //       const manifestURLs = (/*!nsError &&*/ getManifestURLs(namespaces)) || [];\n    //       const allAppGroups = await fetchAppGroups(baseURL, manifestURLs[0]);\n    //       if (ignore) return;\n    //       setAppGroups(_.sortBy(_.flatten(_.map(allAppGroups)), ['name']));\n    //     }\n    //   };\n    //   getAppGroups();\n    //   return () => {\n    //     ignore = true;\n    //   };\n    // }, [/* namespaces, nsError*/ nsLoaded, t]);\n    console.log(\"APP GROUPS = \" + appGroups);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Helmet, null,\n            React.createElement(\"title\", null, t('plugin__console-gitops-plugin~Environments'))),\n        React.createElement(ListPageHeader, { title: t('gitops-plugin~Environments') }),\n        !appGroups && !emptyStateMsg ? (\n        // <LoadingBox />\n        React.createElement(React.Fragment, null)) : (React.createElement(React.Fragment, null,\n            React.createElement(ListPageBody, null,\n                t(\"gitops-plugin~Select an application to view the environment it's deployed in.\"),\n                _.map(appGroups, (appGroup) => appGroup && (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", null,\n                        appGroup.name,\n                        \" \",\n                        appGroup.repo_url))))),\n            React.createElement(GitOpsList, { appGroups: appGroups, emptyStateMsg: emptyStateMsg })))));\n};\nexport default GitOpsListPage;\n"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Error","emptyStateMsg","EmptyState","variant","EmptyStateVariant","EmptyStateIcon","component","EmptyStateBody","GitOpsTableHeader","hasSyncStatus","columns","Thead","Th","hasRightBorder","width","rowSpan","appGroups","some","sync_status","className","OuterScrollContainer","InnerScrollContainer","TableComposable","isStickyHeader","Tbody","map","app","Td","key","name","repo_url","last_deployed","projectRes","isList","kind","optional","setAppGroups","setEmptyStateMsg","namespaces","nsLoaded","nsError","useK8sWatchResource","baseURL","t","useTranslation","ignore","manifestURLs","annotation","filter","ns","_a","_b","metadata","annotations","getManifestURLs","allAppGroups","emptyMsg","console","log","all","manifestURL","data","newListApi","consoleFetchJSON","err","applications","fetchAppGroups","_c","fetchAllAppGroups","ListPageHeader","title","ListPageBody","appGroup"],"sourceRoot":""}