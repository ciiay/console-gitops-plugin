{"version":3,"file":"exposed-environments.1c83ad5eeb89ecb070c3.hot-update.js","mappings":"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","sources":["webpack://console-gitops-plugin/./components/GitOpsEmptyState.tsx","webpack://console-gitops-plugin/./components/GitOpsListPage.tsx","webpack://console-gitops-plugin/./components/list/GitOpsList.tsx","webpack://console-gitops-plugin/./components/list/GitOpsTableHeader.tsx"],"sourcesContent":["import * as React from 'react';\nimport { EmptyState, EmptyStateIcon, EmptyStateVariant, EmptyStateBody, } from '@patternfly/react-core';\nimport { CubesIcon } from '@patternfly/react-icons';\nconst GitOpsEmptyState = ({ emptyStateMsg }) => (React.createElement(EmptyState, { variant: EmptyStateVariant.full },\n    React.createElement(EmptyStateIcon, { variant: \"container\", component: CubesIcon }),\n    React.createElement(EmptyStateBody, null, emptyStateMsg)));\nexport default GitOpsEmptyState;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as React from 'react';\nimport * as _ from 'lodash-es';\nimport Helmet from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { useK8sWatchResource, ListPageHeader, ListPageBody } from '@openshift-console/dynamic-plugin-sdk';\nimport { fetchAllAppGroups, getManifestURLs } from './utils/gitops-utils';\nimport GitOpsList from './list/GitOpsList';\n// import { PageHeading /*, LoadingBox */ } from '@console/internal/components/utils';\n// import { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\n// import { ProjectModel } from '@console/internal/models';\n// import { K8sResourceKind } from '@console/internal/module/k8s';\n// import { DevPreviewBadge } from '@console/shared';\n// import GitOpsList from './list/GitOpsList';\n// import useDefaultSecret from './utils/useDefaultSecret';\n// import './GitOpsListPage.scss';\n// const projectRes = { isList: true, kind: ProjectModel.kind, optional: true };\nconst projectRes = { isList: true, kind: 'Project', optional: true };\nconst GitOpsListPage = () => {\n    const [appGroups, setAppGroups] = React.useState(null);\n    const [emptyStateMsg, setEmptyStateMsg] = React.useState(null);\n    const [namespaces, nsLoaded, nsError] = useK8sWatchResource(projectRes);\n    // const [namespaces, nsLoaded, nsError] = useK8sWatchResource<K8sResourceKind[]>(projectRes);\n    const baseURL = '/api/gitops/pipelines';\n    const { t } = useTranslation();\n    React.useEffect(() => {\n        let ignore = false;\n        const getAppGroups = () => __awaiter(void 0, void 0, void 0, function* () {\n            if (nsLoaded) {\n                const manifestURLs = (!nsError && getManifestURLs(namespaces)) || [];\n                const [allAppGroups, emptyMsg] = yield fetchAllAppGroups(baseURL, manifestURLs, t);\n                if (ignore)\n                    return;\n                setAppGroups(allAppGroups);\n                setEmptyStateMsg(emptyMsg);\n            }\n        });\n        getAppGroups();\n        return () => {\n            ignore = true;\n        };\n    }, [baseURL, namespaces, nsError, nsLoaded, t]);\n    // React.useEffect(() => {\n    //   let ignore = false;\n    //   const getAppGroups = async () => {\n    //     if (nsLoaded) {\n    //       const manifestURLs = (/*!nsError &&*/ getManifestURLs(namespaces)) || [];\n    //       const [allAppGroups, emptyMsg] = await fetchAllAppGroups(baseURL, manifestURLs, t);\n    //       if (ignore) return;\n    //       setAppGroups(allAppGroups);\n    //       setEmptyStateMsg(emptyMsg);\n    //     }\n    //   };\n    //   getAppGroups();\n    //   return () => {\n    //     ignore = true;\n    //   };\n    // }, [baseURL, /* namespaces, nsError, nsLoaded, */ t]);\n    // React.useEffect(() => {\n    //   let ignore = false;\n    //   const getAppGroups = async () => {\n    //     if (nsLoaded && !appGroups) {\n    //       const manifestURLs = (/*!nsError &&*/ getManifestURLs(namespaces)) || [];\n    //       const allAppGroups = await fetchAppGroups(baseURL, manifestURLs[0]);\n    //       if (ignore) return;\n    //       setAppGroups(_.sortBy(_.flatten(_.map(allAppGroups)), ['name']));\n    //     }\n    //   };\n    //   getAppGroups();\n    //   return () => {\n    //     ignore = true;\n    //   };\n    // }, [/* namespaces, nsError*/ nsLoaded, t]);\n    console.log(\"APP GROUPS = \" + appGroups);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Helmet, null,\n            React.createElement(\"title\", null, t('plugin__console-gitops-plugin~Environments'))),\n        React.createElement(ListPageHeader, { title: t('gitops-plugin~Environments') }),\n        !appGroups && !emptyStateMsg ? (\n        // <LoadingBox />\n        React.createElement(React.Fragment, null)) : (React.createElement(React.Fragment, null,\n            React.createElement(ListPageBody, null,\n                t(\"gitops-plugin~Select an application to view the environment it's deployed in.\"),\n                _.map(appGroups, (appGroup) => appGroup && (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", null,\n                        appGroup.name,\n                        \" \",\n                        appGroup.repo_url))))),\n            React.createElement(GitOpsList, { appGroups: appGroups, emptyStateMsg: emptyStateMsg })))));\n};\nexport default GitOpsListPage;\n","import * as React from 'react';\n// import { useTranslation } from 'react-i18next';\n// import { Table, TextFilter } from '@console/internal/components/factory';\n// import { fuzzyCaseInsensitive } from '@console/internal/components/factory/table-filters';\n// import { VirtualizedTable } from '@openshift-console/dynamic-plugin-sdk';\nimport { TableComposable, Tbody, InnerScrollContainer, OuterScrollContainer, Td } from '@patternfly/react-table';\nimport GitOpsEmptyState from '../GitOpsEmptyState';\nimport { GitOpsTableHeader } from './GitOpsTableHeader';\nconst { Table, TextFilter } = require('');\nconst GitOpsList = ({ appGroups, emptyStateMsg }) => {\n    // const { t } = useTranslation();\n    // const [textFilter, setTextFilter] = React.useState('');\n    // const visibleItems = appGroups?.filter(({ name }) => {\n    // return fuzzyCaseInsensitive(textFilter, name);\n    // });\n    const hasSyncStatus = (appGroups === null || appGroups === void 0 ? void 0 : appGroups.some(({ sync_status }) => sync_status /* eslint-disable-line @typescript-eslint/camelcase */)) || false;\n    return (React.createElement(\"div\", { className: \"gop-gitops-list\" }, !emptyStateMsg && appGroups ? (React.createElement(React.Fragment, null,\n        React.createElement(OuterScrollContainer, null,\n            React.createElement(InnerScrollContainer, null,\n                React.createElement(TableComposable, { \"aria-label\": \"Applications table\", variant: \"compact\", isStickyHeader: true },\n                    React.createElement(GitOpsTableHeader\n                    // onSort={onSort}\n                    // sortDirection={activeSortDirection}\n                    // sortIndex={activeSortIndex}\n                    , { \n                        // onSort={onSort}\n                        // sortDirection={activeSortDirection}\n                        // sortIndex={activeSortIndex}\n                        hasSyncStatus: hasSyncStatus }),\n                    React.createElement(Tbody, null, appGroups.map(app => {\n                        (React.createElement(React.Fragment, null,\n                            React.createElement(Td, { key: app.name },\n                                React.createElement(\"div\", null,\n                                    React.createElement(\"span\", null, app.name))),\n                            React.createElement(Td, { width: 10 },\n                                React.createElement(\"div\", null, app.repo_url)),\n                            React.createElement(Td, null, app.sync_status),\n                            React.createElement(Td, null, app.last_deployed)));\n                    }))))))) : (React.createElement(GitOpsEmptyState, { emptyStateMsg: emptyStateMsg }))));\n};\nexport default GitOpsList;\n","import { sortable, Th, Thead } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport * as React from 'react';\n// import i18n from '@console/internal/i18n';\n// import { TableColumn } from '@openshift-console/dynamic-plugin-sdk';\nconst tableColumnClasses = [\n    classNames.default('pf-m-width-20'),\n    classNames.default('pf-m-width-30'),\n    classNames.default('pf-m-hidden', 'pf-m-visible-on-md', 'pf-m-width-20'),\n    classNames.default('pf-m-hidden', 'pf-m-visible-on-lg', 'pf-m-width-30'), // Last deployment\n];\nexport const GitOpsTableColumn = (hasSyncStatus) => {\n    // let columns = new Array<TableColumn<1>>();\n    return [\n        {\n            // title: i18n.t('gitops-plugin~Application name'),\n            title: 'Application name',\n            id: 'name',\n            sortField: 'name',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[0] },\n        },\n        {\n            // title: i18n.t('gitops-plugin~Git repository'),\n            title: 'Git repository',\n            id: 'gitRepository',\n            sortField: 'gitRepository',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[1] },\n        },\n        {\n            title: hasSyncStatus\n                ? 'Environment status' // i18n.t('gitops-plugin~Environment status')\n                : 'Environment',\n            id: 'environments',\n            sortField: 'environments',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[2] },\n        },\n        {\n            // title: i18n.t('gitops-plugin~Last deployment'),\n            title: 'Last deployment',\n            id: 'lastDeployment',\n            sortField: 'lastDeployment',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[3] },\n        },\n    ];\n};\nexport const GitOpsTableHeader = ({ hasSyncStatus, columns }) => {\n    return (React.createElement(Thead, null,\n        React.createElement(Th, { hasRightBorder: true, width: 10, rowSpan: 1 }, \"Application name\"),\n        React.createElement(Th, { hasRightBorder: true, width: 10, rowSpan: 1 }, \"Git repository\"),\n        React.createElement(Th, { hasRightBorder: true, width: 10, rowSpan: 1 }, \"Environment status\"),\n        React.createElement(Th, { hasRightBorder: true, width: 10, rowSpan: 1 }, \"Last deployment\")));\n    // return [\n    //   {\n    //     // title: i18n.t('gitops-plugin~Application name'),\n    //     title: 'Application name',\n    //     id: 'name',\n    //     sortField: 'name',\n    //     transforms: [sortable],\n    //     props: { className: tableColumnClasses[0] },\n    //   },\n    //   {\n    //     // title: i18n.t('gitops-plugin~Git repository'),\n    //     title: 'Git repository',\n    //     id: 'gitRepository',\n    //     sortField: 'gitRepository',\n    //     transforms: [sortable],\n    //     props: { className: tableColumnClasses[1] },\n    //   },\n    //   {\n    //     title: hasSyncStatus\n    //       ? 'Environment status' // i18n.t('gitops-plugin~Environment status')\n    //       : 'Environment', // i18n.t('gitops-plugin~Environment'),\n    //     id: 'environments',\n    //     sortField: 'environments',\n    //     transforms: [sortable],\n    //     props: { className: tableColumnClasses[2] },\n    //   },\n    //   {\n    //     // title: i18n.t('gitops-plugin~Last deployment'),\n    //     title: 'Last deployment',\n    //     id: 'lastDeployment',\n    //     sortField: 'lastDeployment',\n    //     transforms: [sortable],\n    //     props: { className: tableColumnClasses[3] },\n    //   },\n    // ];\n};\n// export default GitOpsTableHeader;\n"],"names":[],"sourceRoot":""}