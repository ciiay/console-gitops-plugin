{"version":3,"file":"exposed-environments.a4fbf5c42f14ef513a90.hot-update.js","mappings":"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","sources":["webpack://console-gitops-plugin/./components/list/GitOpsList.tsx","webpack://console-gitops-plugin/./components/list/GitOpsSyncFragment.tsx","webpack://console-gitops-plugin/./components/list/GitOpsTableRow.tsx"],"sourcesContent":["import * as React from 'react';\n// import { useTranslation } from 'react-i18next';\n// import { Table, TextFilter } from '@console/internal/components/factory';\n// import { fuzzyCaseInsensitive } from '@console/internal/components/factory/table-filters';\n// import { VirtualizedTable } from '@openshift-console/dynamic-plugin-sdk';\nimport { TableComposable, Tbody, InnerScrollContainer, OuterScrollContainer, Td } from '@patternfly/react-table';\nimport GitOpsEmptyState from '../GitOpsEmptyState';\nimport { GitOpsTableHeader } from './GitOpsTableHeader';\n// import { VirtualizedTable } from '@openshift-console/dynamic-plugin-sdk';\nimport GitOpsTableRow from './GitOpsTableRow';\nconst { Table, TextFilter } = require('@console/internal/components/factory');\nconst fuzzyCaseInsensitive = require('@console/internal/components/factory/table-filters');\n// const GitOpsTableRow = require('./GitOpsTableRow');\nconst GitOpsList = ({ appGroups, emptyStateMsg }) => {\n    // const { t } = useTranslation();\n    const [textFilter, setTextFilter] = React.useState('');\n    const visibleItems = appGroups === null || appGroups === void 0 ? void 0 : appGroups.filter(({ name }) => {\n        return fuzzyCaseInsensitive(textFilter, name);\n    });\n    const hasSyncStatus = (appGroups === null || appGroups === void 0 ? void 0 : appGroups.some(({ sync_status }) => sync_status /* eslint-disable-line @typescript-eslint/camelcase */)) || false;\n    return (React.createElement(\"div\", { className: \"gop-gitops-list\" },\n        appGroups.map((a) => a && (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", null,\n                a.name,\n                \" \",\n                a.repo_url)))),\n        !emptyStateMsg && appGroups ? (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: \"co-m-pane__filter-row\" },\n                React.createElement(TextFilter, { value: textFilter, label: 'by name', \n                    // label={t('gitops-plugin~by name')}\n                    onChange: (val) => setTextFilter(val) })),\n            React.createElement(OuterScrollContainer, null,\n                React.createElement(InnerScrollContainer, null,\n                    React.createElement(TableComposable, { \"aria-label\": \"Applications table\", variant: \"compact\", isStickyHeader: true },\n                        React.createElement(GitOpsTableHeader\n                        // onSort={onSort}\n                        // sortDirection={activeSortDirection}\n                        // sortIndex={activeSortIndex}\n                        , { \n                            // onSort={onSort}\n                            // sortDirection={activeSortDirection}\n                            // sortIndex={activeSortIndex}\n                            hasSyncStatus: hasSyncStatus }),\n                        React.createElement(Tbody, null, appGroups.map(app => {\n                            (React.createElement(React.Fragment, null,\n                                React.createElement(Td, { key: app.name },\n                                    React.createElement(\"div\", null,\n                                        React.createElement(\"span\", null, app.name))),\n                                React.createElement(Td, { width: 10 },\n                                    React.createElement(\"div\", null, app.repo_url)),\n                                React.createElement(Td, null, app.sync_status),\n                                React.createElement(Td, null, app.last_deployed)));\n                        }))))),\n            React.createElement(Table, { data: visibleItems, \"aria-label\": 'Environments table', \n                // aria-label={t('gitops-plugin~Environments table')}\n                Header: GitOpsTableHeader(hasSyncStatus), Row: GitOpsTableRow, loaded: !emptyStateMsg, virtualize: true }))) : (React.createElement(GitOpsEmptyState, { emptyStateMsg: emptyStateMsg }))));\n};\nexport default GitOpsList;\n","import * as React from 'react';\nimport { Flex, FlexItem, Tooltip } from '@patternfly/react-core';\nimport { UnknownIcon } from '@patternfly/react-icons';\nimport { global_disabled_color_100 as disabledColor } from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\n// import {\n//   GreenCheckCircleIcon,\n//   YellowExclamationTriangleIcon,\n//   GrayUnknownIcon,\n// } from '@console/shared';\nimport { GreenCheckCircleIcon, YellowExclamationTriangleIcon } from '@openshift-console/dynamic-plugin-sdk';\nexport const GrayUnknownIcon = ({ className, title }) => (React.createElement(UnknownIcon, { color: disabledColor.value, className: className, title: title }));\nconst GitOpsSyncFragment = ({ tooltip, count, icon }) => {\n    let targetIcon;\n    if (icon === 'check') {\n        targetIcon = React.createElement(GreenCheckCircleIcon, null);\n    }\n    else if (icon === 'exclamation') {\n        targetIcon = React.createElement(YellowExclamationTriangleIcon, null);\n    }\n    else {\n        targetIcon = React.createElement(GrayUnknownIcon, null);\n    }\n    return (React.createElement(Flex, { flex: { default: 'flex_1' } },\n        React.createElement(FlexItem, null, count > 0 ? (React.createElement(Tooltip, { isContentLeftAligned: true, content: React.createElement(\"div\", null, tooltip) },\n            React.createElement(\"div\", null,\n                targetIcon,\n                \" \",\n                count))) : (React.createElement(\"div\", null,\n            targetIcon,\n            \" \",\n            count)))));\n};\nexport default GitOpsSyncFragment;\n","import * as React from 'react';\nimport { Flex, FlexItem, Split, SplitItem } from '@patternfly/react-core';\nimport * as classNames from 'classnames';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { routeDecoratorIcon } from '@console/dev-console/src/components/import/render-utils';\nimport { TableData } from '@console/internal/components/factory';\nimport { ExternalLink, Timestamp } from '@console/internal/components/utils';\nimport { GreenCheckCircleIcon, YellowExclamationTriangleIcon, GrayUnknownIcon, } from '@console/shared';\nimport GitOpsSyncFragment from './GitOpsSyncFragment';\nimport './GitOpsTableRow.scss';\nconst tableColumnClasses = [\n    classNames('pf-m-width-20'),\n    classNames('pf-m-width-30'),\n    classNames('pf-m-hidden', 'pf-m-visible-on-md', 'pf-m-width-20'),\n    classNames('pf-m-hidden', 'pf-m-visible-on-lg', 'pf-m-width-30'), // Last deployment\n];\nconst getMatchingEnvs = (envs, desiredStatus) => (acc, status, idx) => desiredStatus === status\n    ? [...acc, envs[idx]] // 1:1 between a status and an env\n    : acc;\nconst GitOpsTableRow = (props) => {\n    const { obj: appGroup } = props;\n    const { name, sync_status: syncStatuses = [], environments: envs, last_deployed: lastDeployed = [], repo_url: repoUrl, } = appGroup;\n    const { t } = useTranslation();\n    const syncedEnvs = syncStatuses.reduce(getMatchingEnvs(envs, 'Synced'), []);\n    const outOfSyncEnvs = syncStatuses.reduce(getMatchingEnvs(envs, 'OutOfSync'), []);\n    const unknownEnvs = syncStatuses.reduce(getMatchingEnvs(envs, 'Unknown'), []);\n    const latestDeployedTime = lastDeployed.reduce((leadingDeployedTime, deployedTime) => leadingDeployedTime < deployedTime ? deployedTime : leadingDeployedTime, '');\n    const latestDeployedEnv = latestDeployedTime\n        ? envs[lastDeployed.indexOf(latestDeployedTime)]\n        : '';\n    return (React.createElement(React.Fragment, null,\n        React.createElement(TableData, { className: tableColumnClasses[0] },\n            React.createElement(Link, { to: `/environments/${appGroup.name}/overview?url=${appGroup.repo_url}`, title: name }, name)),\n        React.createElement(TableData, { className: classNames(tableColumnClasses[1]) },\n            React.createElement(ExternalLink, { href: repoUrl, additionalClassName: 'co-break-all' },\n                React.createElement(\"span\", { style: { marginRight: 'var(--pf-global--spacer--xs)' } }, routeDecoratorIcon(repoUrl, 12, t)),\n                React.createElement(\"span\", { style: { marginRight: 'var(--pf-global--spacer--xs)' } }, repoUrl))),\n        React.createElement(TableData, { className: classNames(tableColumnClasses[2], 'pf-u-text-nowrap') }, syncStatuses.length > 0 ? (React.createElement(Flex, { className: \"gop-gitops-syncStatus\" },\n            React.createElement(GitOpsSyncFragment, { tooltip: syncedEnvs.map((env) => (React.createElement(Split, { className: \"gop-gitops-tooltip-text\", hasGutter: true, key: `${name}-${env}` },\n                    React.createElement(SplitItem, null,\n                        React.createElement(GreenCheckCircleIcon, null)),\n                    React.createElement(SplitItem, { isFilled: true }, env),\n                    React.createElement(SplitItem, null, t('gitops-plugin~Synced'))))), count: syncedEnvs.length, icon: \"check\" }),\n            React.createElement(GitOpsSyncFragment, { tooltip: outOfSyncEnvs.map((env) => (React.createElement(Split, { className: \"gop-gitops-tooltip-text\", hasGutter: true, key: `${name}-${env}` },\n                    React.createElement(SplitItem, null,\n                        React.createElement(YellowExclamationTriangleIcon, null)),\n                    React.createElement(SplitItem, { isFilled: true }, env),\n                    React.createElement(SplitItem, null, t('gitops-plugin~OutOfSync'))))), count: outOfSyncEnvs.length, icon: \"exclamation\" }),\n            React.createElement(GitOpsSyncFragment, { tooltip: unknownEnvs.map((env) => (React.createElement(Split, { className: \"gop-gitops-tooltip-text\", hasGutter: true, key: `${name}-${env}` },\n                    React.createElement(SplitItem, null,\n                        React.createElement(GrayUnknownIcon, null)),\n                    React.createElement(SplitItem, { isFilled: true }, env),\n                    React.createElement(SplitItem, null, t('gitops-plugin~Unknown'))))), count: unknownEnvs.length, icon: \"unknown\" }))) : (React.createElement(\"span\", null, envs.join(', ')))),\n        React.createElement(TableData, { className: tableColumnClasses[3] }, latestDeployedTime !== '' ? (React.createElement(Flex, null,\n            React.createElement(FlexItem, { className: \"gop-gitops-lastDeploymentTime\", spacer: { default: 'spacerXs' } },\n                React.createElement(\"span\", null,\n                    React.createElement(Timestamp, { timestamp: latestDeployedTime }))),\n            React.createElement(FlexItem, null,\n                \"(\",\n                latestDeployedEnv,\n                \")\"))) : (React.createElement(\"span\", null, \"-\")))));\n};\nexport default GitOpsTableRow;\n"],"names":[],"sourceRoot":""}