{"version":3,"file":"exposed-environments.db7232a07b8365906367.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AAC+B;AACA;AACG;AACa;AAC2D;AAChC;AAC/B;AAC3C,YAAY,gCAAgC;AAC5C,YAAY,sBAAsB;AAClC,YAAY,eAAe;AAC3B,YAAY,kBAAkB;AAC9B,YAAY,kBAAkB;AAC9B,YAAY,kBAAkB;AAC9B;AACA;AACA;AACA,wBAAwB;AACxB,qBAAqB;AACrB;AACA,sCAAsC,2CAAc;AACpD,8CAA8C,2CAAc;AAC5D,4CAA4C,0FAAmB;AAC/D;AACA;AACA,YAAY,IAAI,EAAE,6DAAc;AAChC,IAAI,4CAAe;AACnB;AACA;AACA;AACA,kDAAkD,oEAAe;AACjE,uDAAuD,sEAAiB;AACxE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,YAAY,gDAAmB,CAAC,2CAAc;AAC9C,QAAQ,gDAAmB,CAAC,qDAAM;AAClC,YAAY,gDAAmB;AAC/B,QAAQ,gDAAmB,CAAC,iFAAc,IAAI,wCAAwC;AACtF;AACA;AACA,QAAQ,gDAAmB,CAAC,2CAAc,YAAY,gDAAmB,CAAC,2CAAc;AACxF,YAAY,gDAAmB,CAAC,+EAAY;AAC5C;AACA,gBAAgB,iDAAK,uCAAuC,gDAAmB,CAAC,2CAAc;AAC9F,oBAAoB,gDAAmB;AACvC;AACA;AACA;AACA,YAAY,gDAAmB,CAAC,wDAAU,IAAI,oDAAoD;AAClG;AACA,iEAAe,cAAc,EAAC","sources":["webpack://console-gitops-plugin/./components/GitOpsListPage.tsx"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as React from 'react';\nimport * as _ from 'lodash-es';\nimport Helmet from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { useK8sWatchResource, ListPageHeader, ListPageBody } from '@openshift-console/dynamic-plugin-sdk';\nimport { fetchAllAppGroups, getManifestURLs } from './utils/gitops-utils';\nimport GitOpsList from './list/GitOpsList';\n// import { PageHeading /*, LoadingBox */ } from '@console/internal/components/utils';\n// import { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\n// import { ProjectModel } from '@console/internal/models';\n// import { K8sResourceKind } from '@console/internal/module/k8s';\n// import { K8sResourceKind } from '@console/internal/module/k8s';\n// import { DevPreviewBadge } from '@console/shared';\n// import GitOpsList from './list/GitOpsList';\n// import useDefaultSecret from './utils/useDefaultSecret';\n// import './GitOpsListPage.scss';\n// const projectRes = { isList: true, kind: ProjectModel.kind, optional: true };\nconst projectRes = { isList: true, kind: 'Project', optional: true };\nconst GitOpsListPage = () => {\n    const [appGroups, setAppGroups] = React.useState(null);\n    const [emptyStateMsg, setEmptyStateMsg] = React.useState(null);\n    const [namespaces, nsLoaded, nsError] = useK8sWatchResource(projectRes);\n    // const [namespaces, nsLoaded, nsError] = useK8sWatchResource<K8sResourceKind[]>(projectRes);\n    const baseURL = '/api/gitops/pipelines';\n    const { t } = useTranslation();\n    React.useEffect(() => {\n        let ignore = false;\n        const getAppGroups = () => __awaiter(void 0, void 0, void 0, function* () {\n            if (nsLoaded) {\n                const manifestURLs = (!nsError && getManifestURLs(namespaces)) || [];\n                const [allAppGroups, emptyMsg] = yield fetchAllAppGroups(baseURL, manifestURLs, t);\n                if (ignore)\n                    return;\n                setAppGroups(allAppGroups);\n                setEmptyStateMsg(emptyMsg);\n            }\n        });\n        getAppGroups();\n        return () => {\n            ignore = true;\n        };\n    }, [baseURL, namespaces, nsError, nsLoaded, t]);\n    // React.useEffect(() => {\n    //   let ignore = false;\n    //   const getAppGroups = async () => {\n    //     if (nsLoaded) {\n    //       const manifestURLs = (/*!nsError &&*/ getManifestURLs(namespaces)) || [];\n    //       const [allAppGroups, emptyMsg] = await fetchAllAppGroups(baseURL, manifestURLs, t);\n    //       if (ignore) return;\n    //       setAppGroups(allAppGroups);\n    //       setEmptyStateMsg(emptyMsg);\n    //     }\n    //   };\n    //   getAppGroups();\n    //   return () => {\n    //     ignore = true;\n    //   };\n    // }, [baseURL, /* namespaces, nsError, nsLoaded, */ t]);\n    // React.useEffect(() => {\n    //   let ignore = false;\n    //   const getAppGroups = async () => {\n    //     if (nsLoaded && !appGroups) {\n    //       const manifestURLs = (/*!nsError &&*/ getManifestURLs(namespaces)) || [];\n    //       const allAppGroups = await fetchAppGroups(baseURL, manifestURLs[0]);\n    //       if (ignore) return;\n    //       setAppGroups(_.sortBy(_.flatten(_.map(allAppGroups)), ['name']));\n    //     }\n    //   };\n    //   getAppGroups();\n    //   return () => {\n    //     ignore = true;\n    //   };\n    // }, [/* namespaces, nsError*/ nsLoaded, t]);\n    console.log(\"APP GROUPS = \" + appGroups);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Helmet, null,\n            React.createElement(\"title\", null, t('plugin__console-gitops-plugin~Environments'))),\n        React.createElement(ListPageHeader, { title: t('gitops-plugin~Environments') }),\n        !appGroups && !emptyStateMsg ? (\n        // <LoadingBox />\n        React.createElement(React.Fragment, null)) : (React.createElement(React.Fragment, null,\n            React.createElement(ListPageBody, null,\n                t(\"gitops-plugin~Select an application to view the environment it's deployed in.\"),\n                _.map(appGroups, (appGroup) => appGroup && (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", null,\n                        appGroup.name,\n                        \" \",\n                        appGroup.repo_url))))),\n            React.createElement(GitOpsList, { appGroups: appGroups, emptyStateMsg: emptyStateMsg })))));\n};\nexport default GitOpsListPage;\n"],"names":[],"sourceRoot":""}