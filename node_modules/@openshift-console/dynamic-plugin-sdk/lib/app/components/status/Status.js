import * as React from 'react';
import { BanIcon, ClipboardListIcon, ExclamationTriangleIcon, HourglassHalfIcon, HourglassStartIcon, NotStartedIcon, SyncAltIcon, UnknownIcon, } from '@patternfly/react-icons';
import { DASH } from '../../constants';
import { YellowExclamationTriangleIcon } from './icons';
import { ErrorStatus, InfoStatus, ProgressStatus, SuccessStatus } from './statuses';
import StatusIconAndText from './StatusIconAndText';
const Status = ({ status, title, children, iconOnly, noTooltip, className, }) => {
    const statusProps = { title: title || status, iconOnly, noTooltip, className };
    switch (status) {
        case 'New':
            return React.createElement(StatusIconAndText, Object.assign({}, statusProps, { icon: React.createElement(HourglassStartIcon, null) }));
        case 'Pending':
            return React.createElement(StatusIconAndText, Object.assign({}, statusProps, { icon: React.createElement(HourglassHalfIcon, { color: "inherit" }) }));
        case 'Planning':
            return React.createElement(StatusIconAndText, Object.assign({}, statusProps, { icon: React.createElement(ClipboardListIcon, null) }));
        case 'ContainerCreating':
        case 'UpgradePending':
            return React.createElement(ProgressStatus, Object.assign({}, statusProps));
        case 'In Progress':
        case 'Installing':
        case 'InstallReady':
        case 'Replacing':
        case 'Running':
        case 'Updating':
        case 'Upgrading':
            return React.createElement(StatusIconAndText, Object.assign({}, statusProps, { icon: React.createElement(SyncAltIcon, null) }));
        case 'Cancelled':
        case 'Deleting':
        case 'Expired':
        case 'Not Ready':
        case 'Terminating':
            return React.createElement(StatusIconAndText, Object.assign({}, statusProps, { icon: React.createElement(BanIcon, null) }));
        case 'Warning':
            return React.createElement(StatusIconAndText, Object.assign({}, statusProps, { icon: React.createElement(ExclamationTriangleIcon, null) }));
        case 'RequiresApproval':
            return React.createElement(StatusIconAndText, Object.assign({}, statusProps, { icon: React.createElement(YellowExclamationTriangleIcon, null) }));
        case 'ContainerCannotRun':
        case 'CrashLoopBackOff':
        case 'Critical':
        case 'ErrImagePull':
        case 'Error':
        case 'Failed':
        case 'Failure':
        case 'ImagePullBackOff':
        case 'InstallCheckFailed':
        case 'Lost':
        case 'Rejected':
        case 'UpgradeFailed':
            return React.createElement(ErrorStatus, Object.assign({}, statusProps), children);
        case 'Accepted':
        case 'Active':
        case 'Bound':
        case 'Complete':
        case 'Completed':
        case 'Created':
        case 'Enabled':
        case 'Succeeded':
        case 'Ready':
        case 'Up to date':
        case 'Provisioned as node':
        case 'Preferred':
            return React.createElement(SuccessStatus, Object.assign({}, statusProps));
        case 'Info':
            return React.createElement(InfoStatus, Object.assign({}, statusProps), children);
        case 'Unknown':
            return React.createElement(StatusIconAndText, Object.assign({}, statusProps, { icon: React.createElement(UnknownIcon, null) }));
        case 'PipelineNotStarted':
            return React.createElement(StatusIconAndText, Object.assign({}, statusProps, { icon: React.createElement(NotStartedIcon, null) }));
        default:
            return React.createElement(React.Fragment, null, status || DASH);
    }
};
export default Status;
//# sourceMappingURL=Status.js.map